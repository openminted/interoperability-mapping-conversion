<?xml version="1.0" encoding="UTF-8"?>
<analysisEngineDescription xmlns="http://uima.apache.org/resourceSpecifier">
    <frameworkImplementation>org.apache.uima.java</frameworkImplementation>
    <primitive>true</primitive>
    <annotatorImplementationName>de.tudarmstadt.ukp.dkpro.core.io.conll.Conll2009Writer</annotatorImplementationName>
    <analysisEngineMetaData>
        <name>de.tudarmstadt.ukp.dkpro.core.io.conll.Conll2009Writer</name>
        <description>&lt;p&gt;Writes a file in the CoNLL-2009 format.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;ID - &lt;b&gt;(ignored)&lt;/b&gt; Token counter, starting at 1 for each new sentence.&lt;/li&gt;
&lt;li&gt;FORM - &lt;b&gt;(Token)&lt;/b&gt; Word form or punctuation symbol.&lt;/li&gt;
&lt;li&gt;LEMMA - &lt;b&gt;(Lemma)&lt;/b&gt; Fine-grained part-of-speech tag, where the tagset depends on the
language, or identical to the coarse-grained part-of-speech tag if not available.&lt;/li&gt;
&lt;li&gt;PLEMMA - &lt;b&gt;(ignored)&lt;/b&gt; Automatically predicted lemma of FORM&lt;/li&gt;
&lt;li&gt;POS - &lt;b&gt;(POS)&lt;/b&gt; Fine-grained part-of-speech tag, where the tagset depends on the language,
or identical to the coarse-grained part-of-speech tag if not available.&lt;/li&gt;
&lt;li&gt;PPOS - &lt;b&gt;(ignored)&lt;/b&gt; Automatically predicted major POS by a language-specific tagger&lt;/li&gt;
&lt;li&gt;FEAT - &lt;b&gt;(MorphologicalFeatures)&lt;/b&gt; Unordered set of syntactic and/or morphological features (depending
on the particular language), separated by a vertical bar (|), or an underscore if not available.&lt;/li&gt;
&lt;li&gt;PFEAT - &lt;b&gt;(ignored)&lt;/b&gt; Automatically predicted morphological features (if applicable)&lt;/li&gt;
&lt;li&gt;HEAD - &lt;b&gt;(Dependency)&lt;/b&gt; Head of the current token, which is either a value of ID or zero
('0'). Note that depending on the original treebank annotation, there may be multiple tokens with
an ID of zero.&lt;/li&gt;
&lt;li&gt;PHEAD - &lt;b&gt;(ignored)&lt;/b&gt; Automatically predicted syntactic head&lt;/li&gt;
&lt;li&gt;DEPREL - &lt;b&gt;(Dependency)&lt;/b&gt; Dependency relation to the HEAD. The set of dependency relations
depends on the particular language. Note that depending on the original treebank annotation, the
dependency relation may be meaningfull or simply 'ROOT'.&lt;/li&gt;
&lt;li&gt;PDEPREL - &lt;b&gt;(ignored)&lt;/b&gt; Automatically predicted dependency relation to PHEAD&lt;/li&gt;
&lt;li&gt;FILLPRED - &lt;b&gt;(auto-generated)&lt;/b&gt; Contains 'Y' for argument-bearing tokens&lt;/li&gt;
&lt;li&gt;PRED - &lt;b&gt;(SemanticPredicate)&lt;/b&gt; (sense) identifier of a semantic 'predicate' coming from a
current token&lt;/li&gt;
&lt;li&gt;APREDs - &lt;b&gt;(SemanticArgument)&lt;/b&gt; Columns with argument labels for each semantic predicate
(in the ID order)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Sentences are separated by a blank new line&lt;/p&gt;</description>
        <version>1.8.0-SNAPSHOT</version>
        <vendor>DKPro Core Project</vendor>
        <copyright>Copyright 2010-2015
                            Ubiquitous Knowledge Processing (UKP) Lab
                            Technische Universit√§t Darmstadt</copyright>
        <configurationParameters>
            <configurationParameter>
                <name>sourceEncoding</name>
                <description>Name of configuration parameter that contains the character encoding used by the input files.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>filenameSuffix</name>
                <description/>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>writePOS</name>
                <description/>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>writeMorph</name>
                <description/>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>writeLemma</name>
                <description/>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>writeDependency</name>
                <description/>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>writeSemanticPredicate</name>
                <description/>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>targetLocation</name>
                <description>Target location. If this parameter is not yet, data is written to stdout.</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>singularTarget</name>
                <description>Treat target location as a single file name. This is particularly useful if only a single
input file is processed and the result should be written to a pre-defined output file instead
of deriving the file name from the document URI or document ID. It can also be useful if
the user wishes to force multiple input files to be written to a single target file. The
latter case does not work for all formats (e.g. binary, XMI, etc.), but can be useful, e.g.
for Conll-based formats. This option has no effect if the target location points to an
archive location (ZIP/JAR). The #PARAM_COMPRESSION is respected, but does not 
automatically add an extension. The #PARAM_STRIP_EXTENSION has no effect as the
original extension is not preserved.</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>compression</name>
                <description>Choose a compression method. (default: CompressionMethod#NONE)</description>
                <type>String</type>
                <multiValued>false</multiValued>
                <mandatory>false</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>stripExtension</name>
                <description>Remove the original extension.</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>useDocumentId</name>
                <description>Use the document ID as file name even if a relative path information is present.</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>escapeDocumentId</name>
                <description>URL-encode the document ID in the file name to avoid illegal characters (e.g. \, :, etc.)</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
            <configurationParameter>
                <name>overwrite</name>
                <description>Allow overwriting target files (ignored when writing to ZIP archives).</description>
                <type>Boolean</type>
                <multiValued>false</multiValued>
                <mandatory>true</mandatory>
            </configurationParameter>
        </configurationParameters>
        <configurationParameterSettings>
            <nameValuePair>
                <name>sourceEncoding</name>
                <value>
                    <string>UTF-8</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>filenameSuffix</name>
                <value>
                    <string>.conll</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>writePOS</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>writeMorph</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>writeLemma</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>writeDependency</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>writeSemanticPredicate</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>singularTarget</name>
                <value>
                    <boolean>false</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>compression</name>
                <value>
                    <string>NONE</string>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>stripExtension</name>
                <value>
                    <boolean>false</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>useDocumentId</name>
                <value>
                    <boolean>false</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>escapeDocumentId</name>
                <value>
                    <boolean>true</boolean>
                </value>
            </nameValuePair>
            <nameValuePair>
                <name>overwrite</name>
                <value>
                    <boolean>false</boolean>
                </value>
            </nameValuePair>
        </configurationParameterSettings>
        <typeSystemDescription/>
        <typePriorities/>
        <fsIndexCollection/>
        <capabilities>
            <capability>
                <inputs>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.metadata.type.DocumentMetaData</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Sentence</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Token</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.morph.MorphologicalFeatures</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.lexmorph.type.pos.POS</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.segmentation.type.Lemma</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.syntax.type.dependency.Dependency</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.semantics.type.SemanticPredicate</type>
                    <type>de.tudarmstadt.ukp.dkpro.core.api.semantics.type.SemanticArgument</type>
                </inputs>
                <outputs/>
                <languagesSupported/>
            </capability>
        </capabilities>
        <operationalProperties>
            <modifiesCas>true</modifiesCas>
            <multipleDeploymentAllowed>false</multipleDeploymentAllowed>
            <outputsNewCASes>false</outputsNewCASes>
        </operationalProperties>
    </analysisEngineMetaData>
</analysisEngineDescription>
